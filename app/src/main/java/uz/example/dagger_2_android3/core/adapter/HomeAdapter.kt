package uz.example.dagger_2_android3.core.adapterimport android.view.LayoutInflaterimport android.view.ViewGroupimport androidx.recyclerview.widget.LinearLayoutManagerimport androidx.recyclerview.widget.RecyclerViewimport androidx.recyclerview.widget.RecyclerView.ViewHolderimport uz.example.dagger_2_android3.Rimport uz.example.dagger_2_android3.core.adapter.helper.HorizontalDecorationimport uz.example.dagger_2_android3.core.model.HomeGroupItemimport uz.example.dagger_2_android3.core.model.popular.MovieItemimport uz.example.dagger_2_android3.core.utils.HomeItemTypeimport uz.example.dagger_2_android3.databinding.HomeGroupItemBindingclass HomeAdapter : RecyclerView.Adapter<RecyclerView.ViewHolder>() {    private val data = ArrayList<HomeGroupItem>()    var onAllItemClick :((type:HomeItemType)->Unit)? =null    var onMovieItemClick :((MovieItem)->Unit)? =null    fun setData(homeGroupItem: HomeGroupItem) {        data.add(homeGroupItem)        data.sortBy { it.type }        notifyItemInserted(data.indexOf(homeGroupItem))    }    inner class PopularViewHolder(val binding: HomeGroupItemBinding) : RecyclerView.ViewHolder(binding.root) {        private val adapter = HomeMovieAdapter()        private var horizontalDecoration: HorizontalDecoration? = null        fun bindData(d: HomeGroupItem) {            binding.homeTitle.text = d.title            binding.movieList.adapter = adapter            binding.movieList.layoutManager = LinearLayoutManager(binding.root.context, LinearLayoutManager.HORIZONTAL, false)            adapter.data = d.data            horizontalDecoration = HorizontalDecoration(binding.root.context.resources.getDimension(R.dimen.horizontal_margin).toInt())            horizontalDecoration?.let {                binding.movieList.addItemDecoration(it)            }            adapter.onMovieItemClick={                onMovieItemClick?.invoke(it)            }            binding.homeAll.setOnClickListener {                onAllItemClick?.invoke(d.type)            }        }    }    inner class UpComingViewHolder(val binding: HomeGroupItemBinding) : RecyclerView.ViewHolder(binding.root) {        private val adapter = HomeMovieAdapter()        private var horizontalDecoration: HorizontalDecoration? = null        fun bindData(d: HomeGroupItem) {            binding.homeTitle.text = d.title            binding.movieList.adapter = adapter            binding.movieList.layoutManager = LinearLayoutManager(binding.root.context, LinearLayoutManager.HORIZONTAL, false)            adapter.data = d.data            horizontalDecoration = HorizontalDecoration(binding.root.context.resources.getDimension(R.dimen.horizontal_margin).toInt())            horizontalDecoration?.let {                binding.movieList.addItemDecoration(it)            }            adapter.onMovieItemClick={                onMovieItemClick?.invoke(it)            }            binding.homeAll.setOnClickListener {                onAllItemClick?.invoke(d.type)            }        }    }    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {        return when (viewType) {            0->{                PopularViewHolder(HomeGroupItemBinding.inflate(LayoutInflater.from(parent.context), parent, false))            }            1->{                UpComingViewHolder(HomeGroupItemBinding.inflate(LayoutInflater.from(parent.context), parent, false))            }            else ->{                PopularViewHolder(HomeGroupItemBinding.inflate(LayoutInflater.from(parent.context), parent, false))            }        }    }    override fun getItemViewType(position: Int): Int {        return data[position].type.ordinal    }    override fun onBindViewHolder(holder: ViewHolder, position: Int) {        when (data[position].type) {            HomeItemType.POPULAR->{                val holder=(holder as PopularViewHolder)                    holder.bindData(data[position])            }            HomeItemType.UPCOMING->{                val holder= (holder as UpComingViewHolder)                holder.bindData(data[position])            }            HomeItemType.TV->{//                holder.bindData(data[position])            }            HomeItemType.COLLECTION->{//                holder.bindData(data[position])            }            else->{//                holder.bindData(data[position])            }        }    }    override fun getItemCount(): Int {        return data.size    }}